cmake_minimum_required(VERSION 3.18)

message(STATUS "CMake ${CMAKE_VERSION}")

set(SCRIPTS_DIR "" CACHE STRING "CMake scripts path")

if ("${SCRIPTS_DIR}" STREQUAL "")
    set(SCRIPTS_DIR "${CMAKE_SOURCE_DIR}/cmake" CACHE STRING "CMake scripts path" FORCE)
endif()

list(APPEND CMAKE_MODULE_PATH ${SCRIPTS_DIR})

include (functions)

get_git_tag(GIT_TAG)

message(STATUS "Tag found: ${GIT_TAG}")

string(REGEX MATCH "^[0-9]*\.[0-9]*\.[0-9]*" VERSION_NUMBER ${GIT_TAG})

if("${VERSION_NUMBER}" STREQUAL "")
    set(VERSION_NUMBER 0.0.0)
endif()

parse_version(VERSION_NUMBER VERSION_MAJOR VERSION_MINOR VERSION_LEVEL VERSION_BUILD)

set(VERSION_COMPOSED ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_LEVEL}.${VERSION_BUILD})
message(STATUS "Version: ${VERSION_COMPOSED}")

if("${CMAKE_BUILD_TYPE}" STREQUAL "")
    set(CMAKE_BUILD_TYPE Debug)
endif()
set(CONFIG_DIR ${CMAKE_BUILD_TYPE})

set(DEPLOYMENT_DIR "${CMAKE_SOURCE_DIR}/deploy" CACHE STRING "Deployment directory")
set(OUTPUT_BASE_DIR "${CMAKE_SOURCE_DIR}/output" CACHE STRING "Output directory")
set(OUTPUT_BIN_DIR "${OUTPUT_BASE_DIR}/${CONFIG_DIR}/bin")
set(OUTPUT_LIB_DIR "${OUTPUT_BASE_DIR}/${CONFIG_DIR}/lib")

option(VERBOSE_BUILD "Verbose build" ON)

if (VERBOSE_BUILD)
    set(CMAKE_VERBOSE_MAKEFILE ON CACHE STRING "Verbose build" FORCE)
else()
    set(CMAKE_VERBOSE_MAKEFILE OFF CACHE STRING "Verbose build" FORCE)
endif()
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_COLOR_MAKEFILE   ON)

if("${BAREMETAL_TARGET}" STREQUAL "")
    set(BAREMETAL_TARGET "RPI3") # Board type (RPI3/RPI4/RPI5)
endif()

if (BAREMETAL_TARGET STREQUAL "RPI3")
    message(STATUS "Building for Raspberry Pi 3")
elseif (BAREMETAL_TARGET STREQUAL "RPI4")
    message(STATUS "Building for Raspberry Pi 4")
elseif (BAREMETAL_TARGET STREQUAL "RPI5")
    message(STATUS "Building for Raspberry Pi 5")
else()
    message(FATAL_ERROR "Incorrect target ${BAREMETAL_TARGET} specified, must be RPI3, RPI4 or RPI5")
endif()
option(BAREMETAL_CONSOLE_UART0 "Debug output to UART0" OFF)
option(BAREMETAL_CONSOLE_UART1 "Debug output to UART1" OFF)
option(BAREMETAL_COLOR_LOGGING "Use ANSI colors in logging" ON)
option(BAREMETAL_TRACE_DEBUG "Enable debug tracing output" OFF)
option(BAREMETAL_TRACE_MEMORY "Enable memory tracing output" OFF)
option(BAREMETAL_TRACE_MEMORY_DETAIL "Enable detailed memory tracing output" OFF)
option(BAREMETAL_DEBUG_UNITTEST_REGISTRY "Enable debug tracing output for unittest registry" OFF)

message(STATUS "\n** Setting up project **\n--")

message(STATUS "\n##################################################################################")
message(STATUS "\n** Setting up toolchain **\n--")

project(baremetal-main
    DESCRIPTION "Baremetal overall project")

if (BAREMETAL_TARGET STREQUAL "RPI3")
    set(BAREMETAL_ARCH_CPU_OPTIONS -mcpu=cortex-a53 -mlittle-endian -mcmodel=small)
    set(BAREMETAL_TARGET_KERNEL kernel8)
    set(BAREMETAL_RPI_TARGET 3)
elseif (BAREMETAL_TARGET STREQUAL "RPI4")
    set(BAREMETAL_ARCH_CPU_OPTIONS -mcpu=cortex-a72 -mlittle-endian -mcmodel=small)
    set(BAREMETAL_TARGET_KERNEL kernel8-rpi4)
    set(BAREMETAL_RPI_TARGET 4)
elseif (BAREMETAL_TARGET STREQUAL "RPI5")
    set(BAREMETAL_ARCH_CPU_OPTIONS -mcpu=cortex-a76 -mlittle-endian -mcmodel=small)
    set(BAREMETAL_TARGET_KERNEL kernel_2712)
    set(BAREMETAL_RPI_TARGET 5)
endif()
if (BAREMETAL_COLOR_LOGGING)
    set(BAREMETAL_COLOR_OUTPUT 1)
else ()
    set(BAREMETAL_COLOR_OUTPUT 0)
endif()
if (BAREMETAL_TRACE_DEBUG)
    set(BAREMETAL_DEBUG_TRACING 1)
else ()
    set(BAREMETAL_DEBUG_TRACING 0)
endif()
if (BAREMETAL_TRACE_MEMORY)
    set(BAREMETAL_MEMORY_TRACING 1)
else ()
    set(BAREMETAL_MEMORY_TRACING 0)
endif()
if (BAREMETAL_TRACE_MEMORY_DETAIL)
    set(BAREMETAL_MEMORY_TRACING 1)
    set(BAREMETAL_MEMORY_TRACING_DETAIL 1)
else ()
    set(BAREMETAL_MEMORY_TRACING_DETAIL 0)
endif()
if (BAREMETAL_DEBUG_UNITTEST_REGISTRY)
    set(BAREMETAL_UNITTEST_REGISTRY_TRACING 1)
else ()
    set(BAREMETAL_UNITTEST_REGISTRY_TRACING 0)
endif()
set(BAREMETAL_LOAD_ADDRESS 0x80000)

set(DEFINES_C
    PLATFORM_BAREMETAL
    BAREMETAL_RPI_TARGET=${BAREMETAL_RPI_TARGET}
    BAREMETAL_COLOR_OUTPUT=${BAREMETAL_COLOR_OUTPUT}
    BAREMETAL_DEBUG_TRACING=${BAREMETAL_DEBUG_TRACING}
    BAREMETAL_MEMORY_TRACING=${BAREMETAL_MEMORY_TRACING}
    BAREMETAL_MEMORY_TRACING_DETAIL=${BAREMETAL_MEMORY_TRACING_DETAIL}
    DEBUG_REGISTRY=${BAREMETAL_UNITTEST_REGISTRY_TRACING}
    USE_PHYSICAL_COUNTER
#    BAREMETAL_SAVE_VFP_REGS_ON_IRQ
#    BAREMETAL_SAVE_VFP_REGS_ON_FIQ
    BAREMETAL_MAJOR=${VERSION_MAJOR}
    BAREMETAL_MINOR=${VERSION_MINOR}
    BAREMETAL_LEVEL=${VERSION_LEVEL}
    BAREMETAL_BUILD=${VERSION_BUILD}
    BAREMETAL_VERSION="${VERSION_COMPOSED}"
    )
if (BAREMETAL_CONSOLE_UART0)
    list(APPEND DEFINES_C BAREMETAL_CONSOLE_UART0)
endif()
if (BAREMETAL_CONSOLE_UART1)
    list(APPEND DEFINES_C BAREMETAL_CONSOLE_UART1)
endif()
set(DEFINES_C_DEBUG _DEBUG)
set(DEFINES_C_RELEASE NDEBUG)
set(DEFINES_C_MINSIZEREL NDEBUG)
set(DEFINES_C_RELWITHDEBINFO NDEBUG)
set(DEFINES_ASM
    PLATFORM_BAREMETAL
    BAREMETAL_RPI_TARGET=${BAREMETAL_RPI_TARGET}
    )

set(FLAGS_C
    ${BAREMETAL_ARCH_CPU_OPTIONS}
    -Wall
    -Wextra
    -Werror
    -Wno-parentheses
    -ffreestanding
    -fsigned-char
    -nostartfiles
    -std=gnu99
    -mno-outline-atomics
    -nostdinc
    -nostdlib
)
# -g is added by CMake
set(FLAGS_C_DEBUG -O0 -Wno-unused-variable -Wno-unused-parameter)
# -O3 is added by CMake
set(FLAGS_C_RELEASE -D__USE_STRING_INLINES)
# -Os is added by CMake
set(FLAGS_C_MINSIZEREL -O3)
# -O2 -g is added by CMake
set(FLAGS_C_RELWITHDEBINFO )

set(FLAGS_CXX
    ${BAREMETAL_ARCH_CPU_OPTIONS}
    -Wall
    -Wextra
    -Werror
    -Wno-missing-field-initializers
    -Wno-unused-value
    -Wno-aligned-new
    -ffreestanding
    -fsigned-char
    -nostartfiles
    -mno-outline-atomics
    -nostdinc
    -nostdlib
    -nostdinc++
    -fno-exceptions
    -fno-rtti
    )

# -g is added by CMake
set(FLAGS_CXX_DEBUG -O0 -Wno-unused-variable -Wno-unused-parameter)
# -O3 is added by CMake
set(FLAGS_CXX_RELEASE -D__USE_STRING_INLINES)
# -Os is added by CMake
set(FLAGS_CXX_MINSIZEREL -O3)
# -O2 -g is added by CMake
set(FLAGS_CXX_RELWITHDEBINFO )

set(FLAGS_ASM ${BAREMETAL_ARCH_CPU_OPTIONS})
set(FLAGS_ASM_DEBUG -O2)
set(FLAGS_ASM_RELEASE -O2)
set(FLAGS_ASM_MINSIZEREL -O2)
set(FLAGS_ASM_RELWITHDEBINFO -O2)

set(LINK_FLAGS
    -Wl,--section-start=.init=${BAREMETAL_LOAD_ADDRESS}
    -T ${CMAKE_SOURCE_DIR}/baremetal.ld
    -nostdlib
    -nostartfiles
    )
set(LINK_FLAGS_DEBUG )
set(LINK_FLAGS_RELEASE )
set(LINK_FLAGS_MINSIZEREL )
set(LINK_FLAGS_RELWITHDEBINFO )

list(APPEND LINK_LIBRARIES )
list(APPEND LINK_DIRECTORIES )

set(SUPPORTED_CPP_STANDARD 17)

message(STATUS "C++ compiler version:    ${CMAKE_CXX_COMPILER_VERSION}")
message(STATUS "C compiler version:      ${CMAKE_C_COMPILER_VERSION}")
message(STATUS "C++ supported standard:  ${SUPPORTED_CPP_STANDARD}")

set(COMPILE_DEFINITIONS_C_DEBUG ${DEFINES_C} ${DEFINES_C_DEBUG})
set(COMPILE_DEFINITIONS_C_RELEASE ${DEFINES_C} ${DEFINES_C_RELEASE})
set(COMPILE_DEFINITIONS_C_MINSIZEREL ${DEFINES_C} ${DEFINES_C_MINSIZEREL})
set(COMPILE_DEFINITIONS_C_RELWITHDEBINFO ${DEFINES_C} ${DEFINES_C_RELWITHDEBINFO})

set(COMPILE_DEFINITIONS_ASM_DEBUG ${DEFINES_ASM} ${DEFINES_ASM_DEBUG})
set(COMPILE_DEFINITIONS_ASM_RELEASE ${DEFINES_ASM} ${DEFINES_ASM_RELEASE})
set(COMPILE_DEFINITIONS_ASM_MINSIZEREL ${DEFINES_ASM} ${DEFINES_ASM_MINSIZEREL})
set(COMPILE_DEFINITIONS_ASM_RELWITHDEBINFO ${DEFINES_ASM} ${DEFINES_ASM_RELWITHDEBINFO})

set(COMPILE_OPTIONS_C_DEBUG ${FLAGS_C} ${FLAGS_C_DEBUG})
set(COMPILE_OPTIONS_C_RELEASE ${FLAGS_C} ${FLAGS_C_RELEASE})
set(COMPILE_OPTIONS_C_MINSIZEREL ${FLAGS_C} ${FLAGS_C_MINSIZEREL})
set(COMPILE_OPTIONS_C_RELWITHDEBINFO ${FLAGS_C} ${FLAGS_C_RELWITHDEBINFO})

set(COMPILE_OPTIONS_CXX_DEBUG ${FLAGS_CXX} ${FLAGS_CXX_DEBUG})
set(COMPILE_OPTIONS_CXX_RELEASE ${FLAGS_CXX} ${FLAGS_CXX_RELEASE})
set(COMPILE_OPTIONS_CXX_MINSIZEREL ${FLAGS_CXX} ${FLAGS_CXX_MINSIZEREL})
set(COMPILE_OPTIONS_CXX_RELWITHDEBINFO ${FLAGS_CXX} ${FLAGS_CXX_RELWITHDEBINFO})

set(COMPILE_OPTIONS_ASM_DEBUG ${FLAGS_ASM} ${FLAGS_ASM_DEBUG})
set(COMPILE_OPTIONS_ASM_RELEASE ${FLAGS_ASM} ${FLAGS_ASM_RELEASE})
set(COMPILE_OPTIONS_ASM_MINSIZEREL ${FLAGS_ASM} ${FLAGS_ASM_MINSIZEREL})
set(COMPILE_OPTIONS_ASM_RELWITHDEBINFO ${FLAGS_ASM} ${FLAGS_ASM_RELWITHDEBINFO})

set(LINKER_OPTIONS_DEBUG ${LINK_FLAGS} ${LINK_FLAGS_DEBUG})
set(LINKER_OPTIONS_RELEASE ${LINK_FLAGS} ${LINK_FLAGS_RELEASE})
set(LINKER_OPTIONS_MINSIZEREL ${LINK_FLAGS} ${LINK_FLAGS_MINSIZEREL})
set(LINKER_OPTIONS_RELWITHDEBINFO ${LINK_FLAGS} ${LINK_FLAGS_RELWITHDEBINFO})

if (PLATFORM_BAREMETAL)
    set(LINKER_START_GROUP -Wl,--start-group)
    set(LINKER_END_GROUP -Wl,--end-group)
endif()

set(LINKER_LIBRARIES ${LINK_LIBRARIES})

if(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    set(COMPILE_DEFINITIONS_C ${COMPILE_DEFINITIONS_C_DEBUG})
    set(COMPILE_DEFINITIONS_ASM ${COMPILE_DEFINITIONS_ASM_DEBUG})
    set(COMPILE_OPTIONS_C ${COMPILE_OPTIONS_C_DEBUG})
    set(COMPILE_OPTIONS_CXX ${COMPILE_OPTIONS_CXX_DEBUG})
    set(COMPILE_OPTIONS_ASM ${COMPILE_OPTIONS_ASM_DEBUG})
    set(LINKER_OPTIONS ${LINKER_OPTIONS_DEBUG})
elseif(${CMAKE_BUILD_TYPE} STREQUAL "Release")
    set(COMPILE_DEFINITIONS_C ${COMPILE_DEFINITIONS_C_RELEASE})
    set(COMPILE_DEFINITIONS_ASM ${COMPILE_DEFINITIONS_ASM_RELEASE})
    set(COMPILE_OPTIONS_C ${COMPILE_OPTIONS_C_RELEASE})
    set(COMPILE_OPTIONS_CXX ${COMPILE_OPTIONS_CXX_RELEASE})
    set(COMPILE_OPTIONS_ASM ${COMPILE_OPTIONS_ASM_RELEASE})
    set(LINKER_OPTIONS ${LINKER_OPTIONS_RELEASE})
elseif(${CMAKE_BUILD_TYPE} STREQUAL "MinSizeRel")
    set(COMPILE_DEFINITIONS_C ${COMPILE_DEFINITIONS_C_MINSIZEREL})
    set(COMPILE_DEFINITIONS_ASM ${COMPILE_DEFINITIONS_ASM_MINSIZEREL})
    set(COMPILE_OPTIONS_C ${COMPILE_OPTIONS_C_MINSIZEREL})
    set(COMPILE_OPTIONS_CXX ${COMPILE_OPTIONS_CXX_MINSIZEREL})
    set(COMPILE_OPTIONS_ASM ${COMPILE_OPTIONS_ASM_MINSIZEREL})
    set(LINKER_OPTIONS ${LINKER_OPTIONS_MINSIZEREL})
elseif(${CMAKE_BUILD_TYPE} STREQUAL "RelWithDebInfo")
    set(COMPILE_DEFINITIONS_C ${COMPILE_DEFINITIONS_C_RELWITHDEBINFO})
    set(COMPILE_DEFINITIONS_ASM ${COMPILE_DEFINITIONS_ASM_RELWITHDEBINFO})
    set(COMPILE_OPTIONS_C ${COMPILE_OPTIONS_C_RELWITHDEBINFO})
    set(COMPILE_OPTIONS_CXX ${COMPILE_OPTIONS_CXX_RELWITHDEBINFO})
    set(COMPILE_OPTIONS_ASM ${COMPILE_OPTIONS_ASM_RELWITHDEBINFO})
    set(LINKER_OPTIONS ${LINKER_OPTIONS_RELWITHDEBINFO})
else()
    message(FATAL_ERROR "Invalid build type: " ${CMAKE_BUILD_TYPE})
endif()

message(STATUS "Baremetal settings:")
message(STATUS "-- RPI target:                      ${BAREMETAL_RPI_TARGET}")
message(STATUS "-- Architecture options:            ${BAREMETAL_ARCH_CPU_OPTIONS}")
message(STATUS "-- Kernel name:                     ${BAREMETAL_TARGET_KERNEL}")
message(STATUS "-- Kernel load address:             ${BAREMETAL_LOAD_ADDRESS}")
message(STATUS "-- Debug ouput to UART0:            ${BAREMETAL_CONSOLE_UART0}")
message(STATUS "-- Debug ouput to UART1:            ${BAREMETAL_CONSOLE_UART1}")
message(STATUS "-- Color log output:                ${BAREMETAL_COLOR_LOGGING}")
message(STATUS "-- Debug tracing output:            ${BAREMETAL_TRACE_DEBUG}")
message(STATUS "-- Memory tracing output:           ${BAREMETAL_TRACE_MEMORY}")
message(STATUS "-- Detailed memory tracing output:  ${BAREMETAL_TRACE_MEMORY_DETAIL}")
message(STATUS "-- Version major:                   ${VERSION_MAJOR}")
message(STATUS "-- Version minor:                   ${VERSION_MINOR}")
message(STATUS "-- Version level:                   ${VERSION_LEVEL}")
message(STATUS "-- Version build:                   ${VERSION_BUILD}")
message(STATUS "-- Version composed:                ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_LEVEL}")

option(BUILD_TUTORIALS "Build all tutorials" ON)

add_subdirectory(code)
if(BUILD_TUTORIALS)
    add_subdirectory(tutorial)
endif()
