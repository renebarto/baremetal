//------------------------------------------------------------------------------
// Copyright   : Copyright(c) 2025 Rene Barto
//
// File        : KY-040.h
//
// Namespace   : device
//
// Class       : KY040
//
// Description : KY-040 rotary encoder support
//
//------------------------------------------------------------------------------
//
// Baremetal - A C++ bare metal environment for embedded 64 bit ARM devices
//
// Intended support is for 64 bit code only, running on Raspberry Pi (3 or later)
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files(the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy,
// modify, merge, publish, distribute, sublicense, and /or sell copies
// of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
//------------------------------------------------------------------------------

#pragma once

#include <stdlib/Types.h>
#include <baremetal/PhysicalGPIOPin.h>
#include <baremetal/Timer.h>

/// @file
/// Abstract GPIO pin. Could be either a virtual or physical pin

/// @brief Device library namespace
namespace device {

enum class SwitchEncoderState;
enum class SwitchButtonEvent;
enum class SwitchButtonState;

/// <summary>
/// KY-040 rotary switch device
/// </summary>
class KY040
{
public:
    /// <summary>
    /// Events generated by the rotary switch
    /// </summary>
    enum class Event
    {
    	/// @brief Switch is rotated clockwise
        RotateClockwise,
    	/// @brief Switch is rotated counter clockwise
        RotateCounterclockwise,
        /// @brief Switch is pressed
        SwitchDown,
        /// @brief Switch is released
        SwitchUp,
        /// @brief Switch is clicked (short press / release cycle)
        SwitchClick,
        /// @brief Switch is clicked twice in a short time
        SwitchDoubleClick,
        /// @brief Switch is clicked three time in a short time
        SwitchTripleClick,
        /// @brief Switch is held down for a longer time
        SwitchHold, ///< generated each second
        /// @brief Unknown event
        Unknown
    };

    /// <summary>
    /// Pointer to event handler function to be registered by an application
    /// </summary>
    using EventHandler = void(Event event, void *param);

private:
    /// @brief True if the rotary switch was initialized
    bool                            m_isInitialized;
    /// @brief GPIO pin for CLK input
    baremetal::PhysicalGPIOPin      m_clkPin;
    /// @brief GPIO pin for DT input
    baremetal::PhysicalGPIOPin      m_dtPin;
    /// @brief GPIO pin for SW input (switch button)
    baremetal::PhysicalGPIOPin      m_swPin;
    /// @brief Internal state of the rotary encoder
    SwitchEncoderState              m_switchEncoderState;
    /// @brief Internal state of the switch button (to tracking single, double, triple clicking and hold
    SwitchButtonState               m_switchButtonState;
    /// @brief Handle to timer for debouncing the switch button
    baremetal::KernelTimerHandle    m_debounceTimerHandle;
    /// @brief Handle to timer for handling button press ticks (for hold)
    baremetal::KernelTimerHandle    m_tickTimerHandle;
    /// @brief Time at which the current button press occurred
    unsigned                        m_currentPressTicks;
    /// @brief Time at which the current button release occurred
    unsigned                        m_currentReleaseTicks;
    /// @brief Time at which the last button press occurred
    unsigned                        m_lastPressTicks;
    /// @brief Time at which the last button release occurred
    unsigned                        m_lastReleaseTicks;

    /// @brief Registered event handler
    EventHandler*                   m_eventHandler;
    /// @brief Parameter for registered event handler
    void*                           m_eventHandlerParam;

public:
    KY040(uint8 clkPin, uint8 dtPin, uint8 swPin);
    virtual ~KY040();

    void               Initialize();
    void               Uninitialize();

    void               RegisterEventHandler(EventHandler *handler, void *param);
    void               UnregisterEventHandler(EventHandler *handler);
    static const char *EventToString(Event event);

private:
    static void SwitchEncoderInterruptHandler(baremetal::IGPIOPin* pin, void *param);
    void        SwitchEncoderInterruptHandler(baremetal::IGPIOPin* pin);
    static void SwitchButtonInterruptHandler(baremetal::IGPIOPin* pin, void *param);
    void        SwitchButtonInterruptHandler(baremetal::IGPIOPin* pin);
    static void SwitchButtonDebounceHandler(baremetal::KernelTimerHandle handle, void *param, void *context);
    void        SwitchButtonDebounceHandler(baremetal::KernelTimerHandle handle, void *param);
    static void SwitchButtonTickHandler(baremetal::KernelTimerHandle handle, void *param, void *context);
    void        SwitchButtonTickHandler(baremetal::KernelTimerHandle handle, void *param);
    void        HandleSwitchButtonEvent(SwitchButtonEvent switchEvent);
};

} // namespace device
